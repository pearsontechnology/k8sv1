# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1NodeCondition(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Type=None, Status=None, LastHeartbeatTime=None, LastTransitionTime=None, Reason=None, Message=None):
        """
        V1NodeCondition - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Type': 'str',
            'Status': 'str',
            'LastHeartbeatTime': 'datetime',
            'LastTransitionTime': 'datetime',
            'Reason': 'str',
            'Message': 'str'
        }

        self.attribute_map = {
            'Type': 'type',
            'Status': 'status',
            'LastHeartbeatTime': 'lastHeartbeatTime',
            'LastTransitionTime': 'lastTransitionTime',
            'Reason': 'reason',
            'Message': 'message'
        }

        self._Type = Type
        self._Status = Status
        self._LastHeartbeatTime = LastHeartbeatTime
        self._LastTransitionTime = LastTransitionTime
        self._Reason = Reason
        self._Message = Message

    @property
    def Type(self):
        """
        Gets the Type of this V1NodeCondition.
        Type of node condition.

        :return: The Type of this V1NodeCondition.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        """
        Sets the Type of this V1NodeCondition.
        Type of node condition.

        :param Type: The Type of this V1NodeCondition.
        :type: str
        """

        self._Type = Type

    @property
    def Status(self):
        """
        Gets the Status of this V1NodeCondition.
        Status of the condition, one of True, False, Unknown.

        :return: The Status of this V1NodeCondition.
        :rtype: str
        """
        return self._Status

    @Status.setter
    def Status(self, Status):
        """
        Sets the Status of this V1NodeCondition.
        Status of the condition, one of True, False, Unknown.

        :param Status: The Status of this V1NodeCondition.
        :type: str
        """

        self._Status = Status

    @property
    def LastHeartbeatTime(self):
        """
        Gets the LastHeartbeatTime of this V1NodeCondition.
        Last time we got an update on a given condition.

        :return: The LastHeartbeatTime of this V1NodeCondition.
        :rtype: datetime
        """
        return self._LastHeartbeatTime

    @LastHeartbeatTime.setter
    def LastHeartbeatTime(self, LastHeartbeatTime):
        """
        Sets the LastHeartbeatTime of this V1NodeCondition.
        Last time we got an update on a given condition.

        :param LastHeartbeatTime: The LastHeartbeatTime of this V1NodeCondition.
        :type: datetime
        """

        self._LastHeartbeatTime = LastHeartbeatTime

    @property
    def LastTransitionTime(self):
        """
        Gets the LastTransitionTime of this V1NodeCondition.
        Last time the condition transit from one status to another.

        :return: The LastTransitionTime of this V1NodeCondition.
        :rtype: datetime
        """
        return self._LastTransitionTime

    @LastTransitionTime.setter
    def LastTransitionTime(self, LastTransitionTime):
        """
        Sets the LastTransitionTime of this V1NodeCondition.
        Last time the condition transit from one status to another.

        :param LastTransitionTime: The LastTransitionTime of this V1NodeCondition.
        :type: datetime
        """

        self._LastTransitionTime = LastTransitionTime

    @property
    def Reason(self):
        """
        Gets the Reason of this V1NodeCondition.
        (brief) reason for the condition's last transition.

        :return: The Reason of this V1NodeCondition.
        :rtype: str
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        """
        Sets the Reason of this V1NodeCondition.
        (brief) reason for the condition's last transition.

        :param Reason: The Reason of this V1NodeCondition.
        :type: str
        """

        self._Reason = Reason

    @property
    def Message(self):
        """
        Gets the Message of this V1NodeCondition.
        Human readable message indicating details about last transition.

        :return: The Message of this V1NodeCondition.
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        """
        Sets the Message of this V1NodeCondition.
        Human readable message indicating details about last transition.

        :param Message: The Message of this V1NodeCondition.
        :type: str
        """

        self._Message = Message

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
