# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1ServiceSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Ports=None, Selector=None, ClusterIP=None, Type=None, ExternalIPs=None, DeprecatedPublicIPs=None, SessionAffinity=None, LoadBalancerIP=None, LoadBalancerSourceRanges=None):
        """
        V1ServiceSpec - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Ports': 'list[V1ServicePort]',
            'Selector': 'object',
            'ClusterIP': 'str',
            'Type': 'str',
            'ExternalIPs': 'list[str]',
            'DeprecatedPublicIPs': 'list[str]',
            'SessionAffinity': 'str',
            'LoadBalancerIP': 'str',
            'LoadBalancerSourceRanges': 'list[str]'
        }

        self.attribute_map = {
            'Ports': 'ports',
            'Selector': 'selector',
            'ClusterIP': 'clusterIP',
            'Type': 'type',
            'ExternalIPs': 'externalIPs',
            'DeprecatedPublicIPs': 'deprecatedPublicIPs',
            'SessionAffinity': 'sessionAffinity',
            'LoadBalancerIP': 'loadBalancerIP',
            'LoadBalancerSourceRanges': 'loadBalancerSourceRanges'
        }

        self._Ports = Ports
        self._Selector = Selector
        self._ClusterIP = ClusterIP
        self._Type = Type
        self._ExternalIPs = ExternalIPs
        self._DeprecatedPublicIPs = DeprecatedPublicIPs
        self._SessionAffinity = SessionAffinity
        self._LoadBalancerIP = LoadBalancerIP
        self._LoadBalancerSourceRanges = LoadBalancerSourceRanges

    @property
    def Ports(self):
        """
        Gets the Ports of this V1ServiceSpec.
        The list of ports that are exposed by this service. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies

        :return: The Ports of this V1ServiceSpec.
        :rtype: list[V1ServicePort]
        """
        return self._Ports

    @Ports.setter
    def Ports(self, Ports):
        """
        Sets the Ports of this V1ServiceSpec.
        The list of ports that are exposed by this service. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies

        :param Ports: The Ports of this V1ServiceSpec.
        :type: list[V1ServicePort]
        """

        self._Ports = Ports

    @property
    def Selector(self):
        """
        Gets the Selector of this V1ServiceSpec.
        This service will route traffic to pods having labels matching this selector. Label keys and values that must match in order to receive traffic for this service. If not specified, endpoints must be manually specified and the system will not automatically manage them. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#overview

        :return: The Selector of this V1ServiceSpec.
        :rtype: object
        """
        return self._Selector

    @Selector.setter
    def Selector(self, Selector):
        """
        Sets the Selector of this V1ServiceSpec.
        This service will route traffic to pods having labels matching this selector. Label keys and values that must match in order to receive traffic for this service. If not specified, endpoints must be manually specified and the system will not automatically manage them. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#overview

        :param Selector: The Selector of this V1ServiceSpec.
        :type: object
        """

        self._Selector = Selector

    @property
    def ClusterIP(self):
        """
        Gets the ClusterIP of this V1ServiceSpec.
        ClusterIP is usually assigned by the master and is the IP address of the service. If specified, it will be allocated to the service if it is unused or else creation of the service will fail. Valid values are None, empty string (\"\"), or a valid IP address. 'None' can be specified for a headless service when proxying is not required. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies

        :return: The ClusterIP of this V1ServiceSpec.
        :rtype: str
        """
        return self._ClusterIP

    @ClusterIP.setter
    def ClusterIP(self, ClusterIP):
        """
        Sets the ClusterIP of this V1ServiceSpec.
        ClusterIP is usually assigned by the master and is the IP address of the service. If specified, it will be allocated to the service if it is unused or else creation of the service will fail. Valid values are None, empty string (\"\"), or a valid IP address. 'None' can be specified for a headless service when proxying is not required. Cannot be updated. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies

        :param ClusterIP: The ClusterIP of this V1ServiceSpec.
        :type: str
        """

        self._ClusterIP = ClusterIP

    @property
    def Type(self):
        """
        Gets the Type of this V1ServiceSpec.
        Type of exposed service. Must be ClusterIP, NodePort, or LoadBalancer. Defaults to ClusterIP. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#external-services

        :return: The Type of this V1ServiceSpec.
        :rtype: str
        """
        return self._Type

    @Type.setter
    def Type(self, Type):
        """
        Sets the Type of this V1ServiceSpec.
        Type of exposed service. Must be ClusterIP, NodePort, or LoadBalancer. Defaults to ClusterIP. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#external-services

        :param Type: The Type of this V1ServiceSpec.
        :type: str
        """

        self._Type = Type

    @property
    def ExternalIPs(self):
        """
        Gets the ExternalIPs of this V1ServiceSpec.
        externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.  A previous form of this functionality exists as the deprecatedPublicIPs field.  When using this field, callers should also clear the deprecatedPublicIPs field.

        :return: The ExternalIPs of this V1ServiceSpec.
        :rtype: list[str]
        """
        return self._ExternalIPs

    @ExternalIPs.setter
    def ExternalIPs(self, ExternalIPs):
        """
        Sets the ExternalIPs of this V1ServiceSpec.
        externalIPs is a list of IP addresses for which nodes in the cluster will also accept traffic for this service.  These IPs are not managed by Kubernetes.  The user is responsible for ensuring that traffic arrives at a node with this IP.  A common example is external load-balancers that are not part of the Kubernetes system.  A previous form of this functionality exists as the deprecatedPublicIPs field.  When using this field, callers should also clear the deprecatedPublicIPs field.

        :param ExternalIPs: The ExternalIPs of this V1ServiceSpec.
        :type: list[str]
        """

        self._ExternalIPs = ExternalIPs

    @property
    def DeprecatedPublicIPs(self):
        """
        Gets the DeprecatedPublicIPs of this V1ServiceSpec.
        deprecatedPublicIPs is deprecated and replaced by the externalIPs field with almost the exact same semantics.  This field is retained in the v1 API for compatibility until at least 8/20/2016.  It will be removed from any new API revisions.  If both deprecatedPublicIPs *and* externalIPs are set, deprecatedPublicIPs is used.

        :return: The DeprecatedPublicIPs of this V1ServiceSpec.
        :rtype: list[str]
        """
        return self._DeprecatedPublicIPs

    @DeprecatedPublicIPs.setter
    def DeprecatedPublicIPs(self, DeprecatedPublicIPs):
        """
        Sets the DeprecatedPublicIPs of this V1ServiceSpec.
        deprecatedPublicIPs is deprecated and replaced by the externalIPs field with almost the exact same semantics.  This field is retained in the v1 API for compatibility until at least 8/20/2016.  It will be removed from any new API revisions.  If both deprecatedPublicIPs *and* externalIPs are set, deprecatedPublicIPs is used.

        :param DeprecatedPublicIPs: The DeprecatedPublicIPs of this V1ServiceSpec.
        :type: list[str]
        """

        self._DeprecatedPublicIPs = DeprecatedPublicIPs

    @property
    def SessionAffinity(self):
        """
        Gets the SessionAffinity of this V1ServiceSpec.
        Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies

        :return: The SessionAffinity of this V1ServiceSpec.
        :rtype: str
        """
        return self._SessionAffinity

    @SessionAffinity.setter
    def SessionAffinity(self, SessionAffinity):
        """
        Sets the SessionAffinity of this V1ServiceSpec.
        Supports \"ClientIP\" and \"None\". Used to maintain session affinity. Enable client IP based session affinity. Must be ClientIP or None. Defaults to None. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#virtual-ips-and-service-proxies

        :param SessionAffinity: The SessionAffinity of this V1ServiceSpec.
        :type: str
        """

        self._SessionAffinity = SessionAffinity

    @property
    def LoadBalancerIP(self):
        """
        Gets the LoadBalancerIP of this V1ServiceSpec.
        Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.

        :return: The LoadBalancerIP of this V1ServiceSpec.
        :rtype: str
        """
        return self._LoadBalancerIP

    @LoadBalancerIP.setter
    def LoadBalancerIP(self, LoadBalancerIP):
        """
        Sets the LoadBalancerIP of this V1ServiceSpec.
        Only applies to Service Type: LoadBalancer LoadBalancer will get created with the IP specified in this field. This feature depends on whether the underlying cloud-provider supports specifying the loadBalancerIP when a load balancer is created. This field will be ignored if the cloud-provider does not support the feature.

        :param LoadBalancerIP: The LoadBalancerIP of this V1ServiceSpec.
        :type: str
        """

        self._LoadBalancerIP = LoadBalancerIP

    @property
    def LoadBalancerSourceRanges(self):
        """
        Gets the LoadBalancerSourceRanges of this V1ServiceSpec.
        If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: http://releases.k8s.io/HEAD/docs/user-guide/services-firewalls.md

        :return: The LoadBalancerSourceRanges of this V1ServiceSpec.
        :rtype: list[str]
        """
        return self._LoadBalancerSourceRanges

    @LoadBalancerSourceRanges.setter
    def LoadBalancerSourceRanges(self, LoadBalancerSourceRanges):
        """
        Sets the LoadBalancerSourceRanges of this V1ServiceSpec.
        If specified and supported by the platform, this will restrict traffic through the cloud-provider load-balancer will be restricted to the specified client IPs. This field will be ignored if the cloud-provider does not support the feature.\" More info: http://releases.k8s.io/HEAD/docs/user-guide/services-firewalls.md

        :param LoadBalancerSourceRanges: The LoadBalancerSourceRanges of this V1ServiceSpec.
        :type: list[str]
        """

        self._LoadBalancerSourceRanges = LoadBalancerSourceRanges

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
