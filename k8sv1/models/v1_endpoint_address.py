# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1EndpointAddress(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Ip=None, Hostname=None, TargetRef=None):
        """
        V1EndpointAddress - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Ip': 'str',
            'Hostname': 'str',
            'TargetRef': 'V1ObjectReference'
        }

        self.attribute_map = {
            'Ip': 'ip',
            'Hostname': 'hostname',
            'TargetRef': 'targetRef'
        }

        self._Ip = Ip
        self._Hostname = Hostname
        self._TargetRef = TargetRef

    @property
    def Ip(self):
        """
        Gets the Ip of this V1EndpointAddress.
        The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.

        :return: The Ip of this V1EndpointAddress.
        :rtype: str
        """
        return self._Ip

    @Ip.setter
    def Ip(self, Ip):
        """
        Sets the Ip of this V1EndpointAddress.
        The IP of this endpoint. May not be loopback (127.0.0.0/8), link-local (169.254.0.0/16), or link-local multicast ((224.0.0.0/24). IPv6 is also accepted but not fully supported on all platforms. Also, certain kubernetes components, like kube-proxy, are not IPv6 ready.

        :param Ip: The Ip of this V1EndpointAddress.
        :type: str
        """

        self._Ip = Ip

    @property
    def Hostname(self):
        """
        Gets the Hostname of this V1EndpointAddress.
        The Hostname of this endpoint

        :return: The Hostname of this V1EndpointAddress.
        :rtype: str
        """
        return self._Hostname

    @Hostname.setter
    def Hostname(self, Hostname):
        """
        Sets the Hostname of this V1EndpointAddress.
        The Hostname of this endpoint

        :param Hostname: The Hostname of this V1EndpointAddress.
        :type: str
        """

        self._Hostname = Hostname

    @property
    def TargetRef(self):
        """
        Gets the TargetRef of this V1EndpointAddress.
        Reference to object providing the endpoint.

        :return: The TargetRef of this V1EndpointAddress.
        :rtype: V1ObjectReference
        """
        return self._TargetRef

    @TargetRef.setter
    def TargetRef(self, TargetRef):
        """
        Sets the TargetRef of this V1EndpointAddress.
        Reference to object providing the endpoint.

        :param TargetRef: The TargetRef of this V1EndpointAddress.
        :type: V1ObjectReference
        """

        self._TargetRef = TargetRef

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
