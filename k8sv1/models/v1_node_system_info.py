# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1NodeSystemInfo(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, MachineID=None, SystemUUID=None, BootID=None, KernelVersion=None, OsImage=None, ContainerRuntimeVersion=None, KubeletVersion=None, KubeProxyVersion=None, OperatingSystem=None, Architecture=None):
        """
        V1NodeSystemInfo - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'MachineID': 'str',
            'SystemUUID': 'str',
            'BootID': 'str',
            'KernelVersion': 'str',
            'OsImage': 'str',
            'ContainerRuntimeVersion': 'str',
            'KubeletVersion': 'str',
            'KubeProxyVersion': 'str',
            'OperatingSystem': 'str',
            'Architecture': 'str'
        }

        self.attribute_map = {
            'MachineID': 'machineID',
            'SystemUUID': 'systemUUID',
            'BootID': 'bootID',
            'KernelVersion': 'kernelVersion',
            'OsImage': 'osImage',
            'ContainerRuntimeVersion': 'containerRuntimeVersion',
            'KubeletVersion': 'kubeletVersion',
            'KubeProxyVersion': 'kubeProxyVersion',
            'OperatingSystem': 'operatingSystem',
            'Architecture': 'architecture'
        }

        self._MachineID = MachineID
        self._SystemUUID = SystemUUID
        self._BootID = BootID
        self._KernelVersion = KernelVersion
        self._OsImage = OsImage
        self._ContainerRuntimeVersion = ContainerRuntimeVersion
        self._KubeletVersion = KubeletVersion
        self._KubeProxyVersion = KubeProxyVersion
        self._OperatingSystem = OperatingSystem
        self._Architecture = Architecture

    @property
    def MachineID(self):
        """
        Gets the MachineID of this V1NodeSystemInfo.
        Machine ID reported by the node.

        :return: The MachineID of this V1NodeSystemInfo.
        :rtype: str
        """
        return self._MachineID

    @MachineID.setter
    def MachineID(self, MachineID):
        """
        Sets the MachineID of this V1NodeSystemInfo.
        Machine ID reported by the node.

        :param MachineID: The MachineID of this V1NodeSystemInfo.
        :type: str
        """

        self._MachineID = MachineID

    @property
    def SystemUUID(self):
        """
        Gets the SystemUUID of this V1NodeSystemInfo.
        System UUID reported by the node.

        :return: The SystemUUID of this V1NodeSystemInfo.
        :rtype: str
        """
        return self._SystemUUID

    @SystemUUID.setter
    def SystemUUID(self, SystemUUID):
        """
        Sets the SystemUUID of this V1NodeSystemInfo.
        System UUID reported by the node.

        :param SystemUUID: The SystemUUID of this V1NodeSystemInfo.
        :type: str
        """

        self._SystemUUID = SystemUUID

    @property
    def BootID(self):
        """
        Gets the BootID of this V1NodeSystemInfo.
        Boot ID reported by the node.

        :return: The BootID of this V1NodeSystemInfo.
        :rtype: str
        """
        return self._BootID

    @BootID.setter
    def BootID(self, BootID):
        """
        Sets the BootID of this V1NodeSystemInfo.
        Boot ID reported by the node.

        :param BootID: The BootID of this V1NodeSystemInfo.
        :type: str
        """

        self._BootID = BootID

    @property
    def KernelVersion(self):
        """
        Gets the KernelVersion of this V1NodeSystemInfo.
        Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).

        :return: The KernelVersion of this V1NodeSystemInfo.
        :rtype: str
        """
        return self._KernelVersion

    @KernelVersion.setter
    def KernelVersion(self, KernelVersion):
        """
        Sets the KernelVersion of this V1NodeSystemInfo.
        Kernel Version reported by the node from 'uname -r' (e.g. 3.16.0-0.bpo.4-amd64).

        :param KernelVersion: The KernelVersion of this V1NodeSystemInfo.
        :type: str
        """

        self._KernelVersion = KernelVersion

    @property
    def OsImage(self):
        """
        Gets the OsImage of this V1NodeSystemInfo.
        OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).

        :return: The OsImage of this V1NodeSystemInfo.
        :rtype: str
        """
        return self._OsImage

    @OsImage.setter
    def OsImage(self, OsImage):
        """
        Sets the OsImage of this V1NodeSystemInfo.
        OS Image reported by the node from /etc/os-release (e.g. Debian GNU/Linux 7 (wheezy)).

        :param OsImage: The OsImage of this V1NodeSystemInfo.
        :type: str
        """

        self._OsImage = OsImage

    @property
    def ContainerRuntimeVersion(self):
        """
        Gets the ContainerRuntimeVersion of this V1NodeSystemInfo.
        ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).

        :return: The ContainerRuntimeVersion of this V1NodeSystemInfo.
        :rtype: str
        """
        return self._ContainerRuntimeVersion

    @ContainerRuntimeVersion.setter
    def ContainerRuntimeVersion(self, ContainerRuntimeVersion):
        """
        Sets the ContainerRuntimeVersion of this V1NodeSystemInfo.
        ContainerRuntime Version reported by the node through runtime remote API (e.g. docker://1.5.0).

        :param ContainerRuntimeVersion: The ContainerRuntimeVersion of this V1NodeSystemInfo.
        :type: str
        """

        self._ContainerRuntimeVersion = ContainerRuntimeVersion

    @property
    def KubeletVersion(self):
        """
        Gets the KubeletVersion of this V1NodeSystemInfo.
        Kubelet Version reported by the node.

        :return: The KubeletVersion of this V1NodeSystemInfo.
        :rtype: str
        """
        return self._KubeletVersion

    @KubeletVersion.setter
    def KubeletVersion(self, KubeletVersion):
        """
        Sets the KubeletVersion of this V1NodeSystemInfo.
        Kubelet Version reported by the node.

        :param KubeletVersion: The KubeletVersion of this V1NodeSystemInfo.
        :type: str
        """

        self._KubeletVersion = KubeletVersion

    @property
    def KubeProxyVersion(self):
        """
        Gets the KubeProxyVersion of this V1NodeSystemInfo.
        KubeProxy Version reported by the node.

        :return: The KubeProxyVersion of this V1NodeSystemInfo.
        :rtype: str
        """
        return self._KubeProxyVersion

    @KubeProxyVersion.setter
    def KubeProxyVersion(self, KubeProxyVersion):
        """
        Sets the KubeProxyVersion of this V1NodeSystemInfo.
        KubeProxy Version reported by the node.

        :param KubeProxyVersion: The KubeProxyVersion of this V1NodeSystemInfo.
        :type: str
        """

        self._KubeProxyVersion = KubeProxyVersion

    @property
    def OperatingSystem(self):
        """
        Gets the OperatingSystem of this V1NodeSystemInfo.
        The Operating System reported by the node

        :return: The OperatingSystem of this V1NodeSystemInfo.
        :rtype: str
        """
        return self._OperatingSystem

    @OperatingSystem.setter
    def OperatingSystem(self, OperatingSystem):
        """
        Sets the OperatingSystem of this V1NodeSystemInfo.
        The Operating System reported by the node

        :param OperatingSystem: The OperatingSystem of this V1NodeSystemInfo.
        :type: str
        """

        self._OperatingSystem = OperatingSystem

    @property
    def Architecture(self):
        """
        Gets the Architecture of this V1NodeSystemInfo.
        The Architecture reported by the node

        :return: The Architecture of this V1NodeSystemInfo.
        :rtype: str
        """
        return self._Architecture

    @Architecture.setter
    def Architecture(self, Architecture):
        """
        Sets the Architecture of this V1NodeSystemInfo.
        The Architecture reported by the node

        :param Architecture: The Architecture of this V1NodeSystemInfo.
        :type: str
        """

        self._Architecture = Architecture

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
