# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1PersistentVolumeClaimSpec(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, AccessModes=None, Selector=None, Resources=None, VolumeName=None):
        """
        V1PersistentVolumeClaimSpec - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'AccessModes': 'list[V1PersistentVolumeAccessMode]',
            'Selector': 'UnversionedLabelSelector',
            'Resources': 'V1ResourceRequirements',
            'VolumeName': 'str'
        }

        self.attribute_map = {
            'AccessModes': 'accessModes',
            'Selector': 'selector',
            'Resources': 'resources',
            'VolumeName': 'volumeName'
        }

        self._AccessModes = AccessModes
        self._Selector = Selector
        self._Resources = Resources
        self._VolumeName = VolumeName

    @property
    def AccessModes(self):
        """
        Gets the AccessModes of this V1PersistentVolumeClaimSpec.
        AccessModes contains the desired access modes the volume should have. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes-1

        :return: The AccessModes of this V1PersistentVolumeClaimSpec.
        :rtype: list[V1PersistentVolumeAccessMode]
        """
        return self._AccessModes

    @AccessModes.setter
    def AccessModes(self, AccessModes):
        """
        Sets the AccessModes of this V1PersistentVolumeClaimSpec.
        AccessModes contains the desired access modes the volume should have. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes-1

        :param AccessModes: The AccessModes of this V1PersistentVolumeClaimSpec.
        :type: list[V1PersistentVolumeAccessMode]
        """

        self._AccessModes = AccessModes

    @property
    def Selector(self):
        """
        Gets the Selector of this V1PersistentVolumeClaimSpec.
        A label query over volumes to consider for binding.

        :return: The Selector of this V1PersistentVolumeClaimSpec.
        :rtype: UnversionedLabelSelector
        """
        return self._Selector

    @Selector.setter
    def Selector(self, Selector):
        """
        Sets the Selector of this V1PersistentVolumeClaimSpec.
        A label query over volumes to consider for binding.

        :param Selector: The Selector of this V1PersistentVolumeClaimSpec.
        :type: UnversionedLabelSelector
        """

        self._Selector = Selector

    @property
    def Resources(self):
        """
        Gets the Resources of this V1PersistentVolumeClaimSpec.
        Resources represents the minimum resources the volume should have. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#resources

        :return: The Resources of this V1PersistentVolumeClaimSpec.
        :rtype: V1ResourceRequirements
        """
        return self._Resources

    @Resources.setter
    def Resources(self, Resources):
        """
        Sets the Resources of this V1PersistentVolumeClaimSpec.
        Resources represents the minimum resources the volume should have. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#resources

        :param Resources: The Resources of this V1PersistentVolumeClaimSpec.
        :type: V1ResourceRequirements
        """

        self._Resources = Resources

    @property
    def VolumeName(self):
        """
        Gets the VolumeName of this V1PersistentVolumeClaimSpec.
        VolumeName is the binding reference to the PersistentVolume backing this claim.

        :return: The VolumeName of this V1PersistentVolumeClaimSpec.
        :rtype: str
        """
        return self._VolumeName

    @VolumeName.setter
    def VolumeName(self, VolumeName):
        """
        Sets the VolumeName of this V1PersistentVolumeClaimSpec.
        VolumeName is the binding reference to the PersistentVolume backing this claim.

        :param VolumeName: The VolumeName of this V1PersistentVolumeClaimSpec.
        :type: str
        """

        self._VolumeName = VolumeName

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
