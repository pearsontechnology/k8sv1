# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1ServicePort(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Name=None, Protocol=None, Port=None, TargetPort=None, NodePort=None):
        """
        V1ServicePort - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Name': 'str',
            'Protocol': 'str',
            'Port': 'int',
            'TargetPort': 'str',
            'NodePort': 'int'
        }

        self.attribute_map = {
            'Name': 'name',
            'Protocol': 'protocol',
            'Port': 'port',
            'TargetPort': 'targetPort',
            'NodePort': 'nodePort'
        }

        self._Name = Name
        self._Protocol = Protocol
        self._Port = Port
        self._TargetPort = TargetPort
        self._NodePort = NodePort

    @property
    def Name(self):
        """
        Gets the Name of this V1ServicePort.
        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.

        :return: The Name of this V1ServicePort.
        :rtype: str
        """
        return self._Name

    @Name.setter
    def Name(self, Name):
        """
        Sets the Name of this V1ServicePort.
        The name of this port within the service. This must be a DNS_LABEL. All ports within a ServiceSpec must have unique names. This maps to the 'Name' field in EndpointPort objects. Optional if only one ServicePort is defined on this service.

        :param Name: The Name of this V1ServicePort.
        :type: str
        """

        self._Name = Name

    @property
    def Protocol(self):
        """
        Gets the Protocol of this V1ServicePort.
        The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP.

        :return: The Protocol of this V1ServicePort.
        :rtype: str
        """
        return self._Protocol

    @Protocol.setter
    def Protocol(self, Protocol):
        """
        Sets the Protocol of this V1ServicePort.
        The IP protocol for this port. Supports \"TCP\" and \"UDP\". Default is TCP.

        :param Protocol: The Protocol of this V1ServicePort.
        :type: str
        """

        self._Protocol = Protocol

    @property
    def Port(self):
        """
        Gets the Port of this V1ServicePort.
        The port that will be exposed by this service.

        :return: The Port of this V1ServicePort.
        :rtype: int
        """
        return self._Port

    @Port.setter
    def Port(self, Port):
        """
        Sets the Port of this V1ServicePort.
        The port that will be exposed by this service.

        :param Port: The Port of this V1ServicePort.
        :type: int
        """

        self._Port = Port

    @property
    def TargetPort(self):
        """
        Gets the TargetPort of this V1ServicePort.
        Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#defining-a-service

        :return: The TargetPort of this V1ServicePort.
        :rtype: str
        """
        return self._TargetPort

    @TargetPort.setter
    def TargetPort(self, TargetPort):
        """
        Sets the TargetPort of this V1ServicePort.
        Number or name of the port to access on the pods targeted by the service. Number must be in the range 1 to 65535. Name must be an IANA_SVC_NAME. If this is a string, it will be looked up as a named port in the target Pod's container ports. If this is not specified, the value of the 'port' field is used (an identity map). This field is ignored for services with clusterIP=None, and should be omitted or set equal to the 'port' field. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#defining-a-service

        :param TargetPort: The TargetPort of this V1ServicePort.
        :type: str
        """

        self._TargetPort = TargetPort

    @property
    def NodePort(self):
        """
        Gets the NodePort of this V1ServicePort.
        The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#type--nodeport

        :return: The NodePort of this V1ServicePort.
        :rtype: int
        """
        return self._NodePort

    @NodePort.setter
    def NodePort(self, NodePort):
        """
        Sets the NodePort of this V1ServicePort.
        The port on each node on which this service is exposed when type=NodePort or LoadBalancer. Usually assigned by the system. If specified, it will be allocated to the service if unused or else creation of the service will fail. Default is to auto-allocate a port if the ServiceType of this Service requires one. More info: http://releases.k8s.io/HEAD/docs/user-guide/services.md#type--nodeport

        :param NodePort: The NodePort of this V1ServicePort.
        :type: int
        """

        self._NodePort = NodePort

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
