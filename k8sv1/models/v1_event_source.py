# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1EventSource(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Component=None, Host=None):
        """
        V1EventSource - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Component': 'str',
            'Host': 'str'
        }

        self.attribute_map = {
            'Component': 'component',
            'Host': 'host'
        }

        self._Component = Component
        self._Host = Host

    @property
    def Component(self):
        """
        Gets the Component of this V1EventSource.
        Component from which the event is generated.

        :return: The Component of this V1EventSource.
        :rtype: str
        """
        return self._Component

    @Component.setter
    def Component(self, Component):
        """
        Sets the Component of this V1EventSource.
        Component from which the event is generated.

        :param Component: The Component of this V1EventSource.
        :type: str
        """

        self._Component = Component

    @property
    def Host(self):
        """
        Gets the Host of this V1EventSource.
        Host name on which the event is generated.

        :return: The Host of this V1EventSource.
        :rtype: str
        """
        return self._Host

    @Host.setter
    def Host(self, Host):
        """
        Sets the Host of this V1EventSource.
        Host name on which the event is generated.

        :param Host: The Host of this V1EventSource.
        :type: str
        """

        self._Host = Host

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
