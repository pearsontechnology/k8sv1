# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1PersistentVolumeClaimStatus(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, Phase=None, AccessModes=None, Capacity=None):
        """
        V1PersistentVolumeClaimStatus - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'Phase': 'str',
            'AccessModes': 'list[V1PersistentVolumeAccessMode]',
            'Capacity': 'object'
        }

        self.attribute_map = {
            'Phase': 'phase',
            'AccessModes': 'accessModes',
            'Capacity': 'capacity'
        }

        self._Phase = Phase
        self._AccessModes = AccessModes
        self._Capacity = Capacity

    @property
    def Phase(self):
        """
        Gets the Phase of this V1PersistentVolumeClaimStatus.
        Phase represents the current phase of PersistentVolumeClaim.

        :return: The Phase of this V1PersistentVolumeClaimStatus.
        :rtype: str
        """
        return self._Phase

    @Phase.setter
    def Phase(self, Phase):
        """
        Sets the Phase of this V1PersistentVolumeClaimStatus.
        Phase represents the current phase of PersistentVolumeClaim.

        :param Phase: The Phase of this V1PersistentVolumeClaimStatus.
        :type: str
        """

        self._Phase = Phase

    @property
    def AccessModes(self):
        """
        Gets the AccessModes of this V1PersistentVolumeClaimStatus.
        AccessModes contains the actual access modes the volume backing the PVC has. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes-1

        :return: The AccessModes of this V1PersistentVolumeClaimStatus.
        :rtype: list[V1PersistentVolumeAccessMode]
        """
        return self._AccessModes

    @AccessModes.setter
    def AccessModes(self, AccessModes):
        """
        Sets the AccessModes of this V1PersistentVolumeClaimStatus.
        AccessModes contains the actual access modes the volume backing the PVC has. More info: http://releases.k8s.io/HEAD/docs/user-guide/persistent-volumes.md#access-modes-1

        :param AccessModes: The AccessModes of this V1PersistentVolumeClaimStatus.
        :type: list[V1PersistentVolumeAccessMode]
        """

        self._AccessModes = AccessModes

    @property
    def Capacity(self):
        """
        Gets the Capacity of this V1PersistentVolumeClaimStatus.
        Represents the actual resources of the underlying volume.

        :return: The Capacity of this V1PersistentVolumeClaimStatus.
        :rtype: object
        """
        return self._Capacity

    @Capacity.setter
    def Capacity(self, Capacity):
        """
        Sets the Capacity of this V1PersistentVolumeClaimStatus.
        Represents the actual resources of the underlying volume.

        :param Capacity: The Capacity of this V1PersistentVolumeClaimStatus.
        :type: object
        """

        self._Capacity = Capacity

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
