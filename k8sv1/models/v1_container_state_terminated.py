# coding: utf-8

"""

    No descripton provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)

    OpenAPI spec version: v1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git

    Licensed under the Apache License, Version 2.0 (the "License");
    you may not use this file except in compliance with the License.
    You may obtain a copy of the License at

        http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing, software
    distributed under the License is distributed on an "AS IS" BASIS,
    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
    See the License for the specific language governing permissions and
    limitations under the License.
"""

from pprint import pformat
from six import iteritems
import re


class V1ContainerStateTerminated(object):
    """
    NOTE: This class is auto generated by the swagger code generator program.
    Do not edit the class manually.
    """
    def __init__(self, ExitCode=None, Signal=None, Reason=None, Message=None, StartedAt=None, FinishedAt=None, ContainerID=None):
        """
        V1ContainerStateTerminated - a model defined in Swagger

        :param dict swaggerTypes: The key is attribute name
                                  and the value is attribute type.
        :param dict attributeMap: The key is attribute name
                                  and the value is json key in definition.
        """
        self.swagger_types = {
            'ExitCode': 'int',
            'Signal': 'int',
            'Reason': 'str',
            'Message': 'str',
            'StartedAt': 'datetime',
            'FinishedAt': 'datetime',
            'ContainerID': 'str'
        }

        self.attribute_map = {
            'ExitCode': 'exitCode',
            'Signal': 'signal',
            'Reason': 'reason',
            'Message': 'message',
            'StartedAt': 'startedAt',
            'FinishedAt': 'finishedAt',
            'ContainerID': 'containerID'
        }

        self._ExitCode = ExitCode
        self._Signal = Signal
        self._Reason = Reason
        self._Message = Message
        self._StartedAt = StartedAt
        self._FinishedAt = FinishedAt
        self._ContainerID = ContainerID

    @property
    def ExitCode(self):
        """
        Gets the ExitCode of this V1ContainerStateTerminated.
        Exit status from the last termination of the container

        :return: The ExitCode of this V1ContainerStateTerminated.
        :rtype: int
        """
        return self._ExitCode

    @ExitCode.setter
    def ExitCode(self, ExitCode):
        """
        Sets the ExitCode of this V1ContainerStateTerminated.
        Exit status from the last termination of the container

        :param ExitCode: The ExitCode of this V1ContainerStateTerminated.
        :type: int
        """

        self._ExitCode = ExitCode

    @property
    def Signal(self):
        """
        Gets the Signal of this V1ContainerStateTerminated.
        Signal from the last termination of the container

        :return: The Signal of this V1ContainerStateTerminated.
        :rtype: int
        """
        return self._Signal

    @Signal.setter
    def Signal(self, Signal):
        """
        Sets the Signal of this V1ContainerStateTerminated.
        Signal from the last termination of the container

        :param Signal: The Signal of this V1ContainerStateTerminated.
        :type: int
        """

        self._Signal = Signal

    @property
    def Reason(self):
        """
        Gets the Reason of this V1ContainerStateTerminated.
        (brief) reason from the last termination of the container

        :return: The Reason of this V1ContainerStateTerminated.
        :rtype: str
        """
        return self._Reason

    @Reason.setter
    def Reason(self, Reason):
        """
        Sets the Reason of this V1ContainerStateTerminated.
        (brief) reason from the last termination of the container

        :param Reason: The Reason of this V1ContainerStateTerminated.
        :type: str
        """

        self._Reason = Reason

    @property
    def Message(self):
        """
        Gets the Message of this V1ContainerStateTerminated.
        Message regarding the last termination of the container

        :return: The Message of this V1ContainerStateTerminated.
        :rtype: str
        """
        return self._Message

    @Message.setter
    def Message(self, Message):
        """
        Sets the Message of this V1ContainerStateTerminated.
        Message regarding the last termination of the container

        :param Message: The Message of this V1ContainerStateTerminated.
        :type: str
        """

        self._Message = Message

    @property
    def StartedAt(self):
        """
        Gets the StartedAt of this V1ContainerStateTerminated.
        Time at which previous execution of the container started

        :return: The StartedAt of this V1ContainerStateTerminated.
        :rtype: datetime
        """
        return self._StartedAt

    @StartedAt.setter
    def StartedAt(self, StartedAt):
        """
        Sets the StartedAt of this V1ContainerStateTerminated.
        Time at which previous execution of the container started

        :param StartedAt: The StartedAt of this V1ContainerStateTerminated.
        :type: datetime
        """

        self._StartedAt = StartedAt

    @property
    def FinishedAt(self):
        """
        Gets the FinishedAt of this V1ContainerStateTerminated.
        Time at which the container last terminated

        :return: The FinishedAt of this V1ContainerStateTerminated.
        :rtype: datetime
        """
        return self._FinishedAt

    @FinishedAt.setter
    def FinishedAt(self, FinishedAt):
        """
        Sets the FinishedAt of this V1ContainerStateTerminated.
        Time at which the container last terminated

        :param FinishedAt: The FinishedAt of this V1ContainerStateTerminated.
        :type: datetime
        """

        self._FinishedAt = FinishedAt

    @property
    def ContainerID(self):
        """
        Gets the ContainerID of this V1ContainerStateTerminated.
        Container's ID in the format 'docker://<container_id>'

        :return: The ContainerID of this V1ContainerStateTerminated.
        :rtype: str
        """
        return self._ContainerID

    @ContainerID.setter
    def ContainerID(self, ContainerID):
        """
        Sets the ContainerID of this V1ContainerStateTerminated.
        Container's ID in the format 'docker://<container_id>'

        :param ContainerID: The ContainerID of this V1ContainerStateTerminated.
        :type: str
        """

        self._ContainerID = ContainerID

    def to_dict(self):
        """
        Returns the model properties as a dict
        """
        result = {}

        for attr, _ in iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """
        Returns the string representation of the model
        """
        return pformat(self.to_dict())

    def __repr__(self):
        """
        For `print` and `pprint`
        """
        return self.to_str()

    def __eq__(self, other):
        """
        Returns true if both objects are equal
        """
        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """
        Returns true if both objects are not equal
        """
        return not self == other
